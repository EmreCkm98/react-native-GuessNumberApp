app.js teki yorum satırları:

fetchFonts fonksiyonunun üstündeki yorumlar:
//olusturdugumuz custom fontu fetchFonts()diye herhangi biryerde kullanabilirdik.
//ama bu font component render edilirken 1 milisaniye bile gecikse hata verir.o yüzden Apploading componentini kullanıcaz.
//yani bir yerde async  cevap bekledigimiz bir yer olursa apploading kullanıyoruz.startgamescreende title stylesinde kullandık

fetchFonts fonk yorumu:
//kendi fontumuzu olusturduk onu kullanıcaz.font klasorundeki ttfleri dısarıdan aldık.

return fonk yorumu :
//safe area view ios icin ekran boyutunda ayar yapıyor.kenarlardan bosluk veriyor.

stargamescreen teki yorum satırları :

enteredvalue usestatesindeki yorum:
//kullanıcın inputa sadece sayı girmesini saglamak icin state kullanıcaz.

numberinputhanddler fonk yorumu:
//bu fonksiyon inputu alıcak.
setenteredvalue yorumu:
//regex ile sadece sayı girilmesini kontrol etiyoruz.

useeffect yorumu:
//bunu yapmamızın sebebi telefononun yatay yada dikey yapıldıgı zaman boyutu değiştigi icin state ile kontrol edicez.!!!
return fonk yorumu:
//eski eventi kaldırıyor yenisini render edilince yukarda ekliyor.

return fonk yorumu:
//KeyboardAvoidingView scroolviewin altına gelir!!

alttaki style yorumu:
 /*button: {
   // width: 100,
    width:Dimensions.get("window").width/4//dimension sayesinde telefonun genisligini 4e bölerek butonlara verdik.
    //dimensions ile telefonun ne kadar pixel genişligi uzunlugu var onu ogreniriz.her telin boyutu farklı cunku.
  },*/

gamescreen teki yorum satırları:

generaterandombetween üstündeki yorumlar :
//hook'sun useref ve useeffect fonklarını kullandık.useref;bir dom elementini yani input gibi elemente erismek icin kullaılır.
//asagıda useref ile onceki tahmini tuttuk.cunku render işlemiyle kaybolmasın diye.
//useeffect ise bi

pastGuesses usestatesindeki yorum :
//her tahmini ekranda gostercez

const {userChoice,onGameOver} = props; //bu satırın anlamı : hemen altta kullandıgımız props.usserchoice ve props.ongameover
//kullanımları yerine direkt userchoice ve ongameover yazabildik.

return fonk yorumu :
//nextGuessHandler fonskyonu parametreli oldugu icin parametreyi bind ile geciriyoruz.2.parametre value.

mainbutton.ios.js taki yorumlar:

const mainbutton=props üstündeki yorum :
//t.opacityi iosta t.nativefeedbacki androidde kullanıcaz.

mainbutton.android.js teki yorumlar :

const mainbutton componeti üstündeki yorum :
//t.opacityi iosta t.nativefeedbacki androidde kullanıcaz.

let buttonkmponentteki yorum:
//iosta bunu.androidde alttakini kullancaz.

if(platform.version>21 yorumu :
//butona ripple efecti eklicez.sadece 21 üstü sürümde oluyor.

input.js teki yorumlar :

return fonk yorumu :
//...props kullanımı ile bu componente gelen tüm propları textınputta kullanıyoruz demek oluyor.
        //yani örnek olarak;bu componenti stargamescreenda kulalnıyoruz.ordan sadece style porpunu yollamıstık.
        //ama artık autocorrect,keyboard vb. tüm textınputa ait özellikleri yollayabiliriz buraya.********

card.jsteki yorumlar :

return fonk yorumu :

//... jsde spread operator olarak geciyor.anlamı:kullanıldıgı yere sınırsız parametre yollamayı saglıyor.
    //props.style ile baska componentlerden gelen styleları card stylesine ekliyoruz.!!!